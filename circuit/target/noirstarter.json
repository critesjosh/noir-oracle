{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":13230353412888145107,"abi":{"parameters":[{"name":"input","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VaS3LbMAyFfv7GSZyf8+kim3bTjWTJlrxzptMT5AR2I3fRRdqOD6CT9Ww1UyKGYcYzjQGPjZkMJYJ+fABBgqTiwT+5W/x9ts+RLT1S+rAqqBvbMt5OEkGsWIujJ8jR5VtTBjgA3OnSxvgMXwg3Boe8EzvhFZRvaMsInRPY0ij+sLqIkNBypM9w03iYZWXeL5M0mcT90bQYxNlgOiySIhkUg6d+kaZlkRX5aDrK41GcpWUyG4zSmcUN34+VMKw4Ap0B9oV9KWlzbQNWkZfTWZ6lkzibTRc4w1mZTvqjZFakC/g0S6aTMn7KpvkwGxaz/MV/PokdKtLxVAP5VcZIXZNwXQG3IRgMWnY3iIOFcJ1cJRaABmw/YTmu5Bg1QTbwcfE3uA/gzqpac0IQa2cZtWXLNjoEHWgUPKO2CQmUYDtya2Qp1rbZtAVygdqGw8imkjYfwWFm0yPQyaYdTcIdBdxj2O9sauw+Jg4WwlXJpm3LVTqbSo7RCehkU4P7AKsivXBFsJ+L9S7O5QEsE6kg7s52Eae27KJzMHCMgu8iuqB3LkdHSp/LT0EuOLtwGDsJSZvP4DB3Emegs5M41yR8roB7IRgMWnZfEAcL4arsJLqWq/ROQnKMLgFUdhIGd9fncskrfAddlYx6ZcseOgQdaBQ8o/ZA/1xOnbhtNr0CuUDtwWFkU0mbr+Ews+k16GTTG03CNwq4t7Df2dTYfUscLISrkk17lqt0NpUcozvQyaYGV/tc3oX9XKzxsy+1mcYXOOqoLiXPeAf1OJ98+3E/f36+fyrLn685dGDLJusOh2Is5Oqmg64UfhFneRPW3SLIP23C6qZOGL/fJJgK+DF+Lf1SLfG5LRgHHqiNU6psZ78Db19pYd+hUoy4pmLA6mj/LVCNqcRj/SEf7h98xm8AQbXk4zFdWK3bgbqoWrXDiPmgekfa8djySbtPsNqv7+DtOXhrxtQiZgfKcdN3+Z2PSVit9k111O8h8Sf63VyafK3WfWakXqnY9LqHbVj8iPDGPil3n7XnzxGr+whL3i/2kLbYT0DqsM8T+14jOvztJqzQgXXqaF9jWHUHFq1Du80/X3ywz+aK34wfHtr+dz7gPKPX7vu+Birlg41rYODwnflsh7nyezl//PV7Tmm7dmZcDw5Y3sZ/B4Zr+UQTTMjglA6rVf3Y1sdbSF4spzROKzqlqYRET9tn9v0M3IJhD8SWFsjbEtvtFvapgP+63aLSYrZSwTEOHb/z3njnMbSpLa+ndR2HDjHPHXVNVl4QPI0jw6UOvnOM6D37JbOT+nksxAHxcB5FsC4+09GtFeXnyfNLOJfA0RcKjRXU/wW5EzvXjy8AAA==","debug_symbols":"ldbRasMgFAbgd/E6Fx6PRpNXGaOYNi2CmJKkgxHy7jNbc2Mzyn/nr36CHkQXcem7x+0U0nWYRPuxiDic/RyGlNMi5G/XdPdpS9Psx1m0SqpK9OmSW2TXSlxD7EVr5fpZCToELHdgdAEUChgFGgUGBTUKLAocChoUkITFca2N24XlUihYMCw0LAwsalhYWDhYNKhQEhbv7verOK65s0/BRKVgWGhYGFjUsLCwcLBoUMESFgSLw5ozmV2wLAXDQsPCwKKGhYWFg0WDCi1hQbB4d88LkUM3hhjD7VT+OJZ/tkian4vR6yMvYUGwULBgWGhYGEysOX35Mfgu9tuJb4OPdN4LkOP8ff8byZN/AA==","file_map":{"70":{"source":"#[oracle(getSqrt)]\nunconstrained fn sqrt(input: [Field; 2]) -> [Field; 2] {}\n\nunconstrained fn get_sqrt(input: [Field; 2]) -> [Field; 2] {\n    sqrt(input)\n}\n\nfn main(input: [Field; 2]) {\n    let sqrt = get_sqrt(input);\n    assert(sqrt[0].pow_32(2) as u64 == input[0] as u64);\n    assert(sqrt[1].pow_32(2) as u64 == input[1] as u64);\n}\n\n#[test]\nfn test_sqrt() {\n    let input = [\n        9,\n        16\n    ];\n    main(input);\n}\n","path":"/home/josh/Documents/test/noir-oracles/noirenberg/vite-hardhat/circuit/src/main.nr"}},"names":["main"],"brillig_names":["get_sqrt","directive_integer_quotient","directive_invert"]}